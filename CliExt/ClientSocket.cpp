#include "stdafx.h"
#include "ClientSocket.h"

extern HMODULE g_Engine;

DWORD g_CryptPacketFunction = 0;
UINT g_ChecksumKey = 0;
UINT g_LastChecksum = 0;
volatile LONG g_PacketCounter = 4;

typedef int (*__VAssemble)(PBYTE, int, const char*, va_list);
__VAssemble VAssemble = 0;
UINT g_VAssembleWrapperExit = 0;

BYTE g_StaticKey[8][32] = { 0x77, 0x78, 0x12, 0x67, 0xa1, 0xd0, 0x96, 0xe8, 0x73, 0x8d, 0xf7, 0x55, 0x82, 0x71, 0xf0, 0xda, 0x87, 0xeb, 0xf0, 0x77, 0x20, 0xf1, 0x1f, 0x1d, 0xe7, 0xdb, 0x74, 0x53, 0x38, 0x47, 0xaf, 0xb6, 0x4a, 0xbe, 0xe5, 0x41, 0x16, 0x59, 0x6e, 0xab, 0x9f, 0xd4, 0x15, 0xfa, 0x1c, 0x76, 0x2b, 0x7d, 0x79, 0x41, 0x63, 0x2e, 0xeb, 0xc3, 0x31, 0xdf, 0xeb, 0x10, 0x7c, 0x32, 0x32, 0xf8, 0x5b, 0x83, 0x41, 0x77, 0xbf, 0xfa, 0xa, 0x10, 0xbc, 0x1, 0x1d, 0x26, 0x40, 0x0, 0x8, 0x36, 0xf8, 0xea, 0x5d, 0xba, 0x59, 0x67, 0xe6, 0xd0, 0x31, 0xf8, 0x9b, 0x5a, 0x6, 0x36, 0xcd, 0x9f, 0x96, 0x4d, 0x37, 0x5c, 0xaa, 0xc0, 0x36, 0x2, 0x99, 0xec, 0x17, 0x2f, 0xa7, 0x12, 0x7c, 0x57, 0xbc, 0x4c, 0x1, 0x3d, 0x71, 0x94, 0x2, 0x8c, 0x9, 0xeb, 0x96, 0xf, 0x54, 0xd1, 0xf4, 0xc1, 0x15, 0x3f, 0xe3, 0x76, 0xd0, 0x46, 0xc1, 0x5, 0xbd, 0x7f, 0xa5, 0xe7, 0xa6, 0x63, 0x19, 0x3e, 0x7b, 0xcc, 0x14, 0xf1, 0x6c, 0xaf, 0x8f, 0x32, 0x43, 0x51, 0x6a, 0xcb, 0xd4, 0xfa, 0xf5, 0xab, 0x2d, 0x8d, 0xf3, 0x11, 0x8a, 0xc4, 0x36, 0xbb, 0x8e, 0xcb, 0xc9, 0x92, 0xbd, 0xb6, 0xdf, 0x1d, 0xdf, 0xa7, 0x33, 0x4a, 0x35, 0x38, 0x55, 0xc2, 0x1d, 0xba, 0x8c, 0x75, 0x1b, 0x38, 0x8e, 0x6f, 0xe2, 0x72, 0xf0, 0xc4, 0x58, 0x7, 0x85, 0x88, 0x18, 0xed, 0x6f, 0xb2, 0x93, 0x4f, 0x40, 0xed, 0x41, 0x1a, 0xdb, 0xfd, 0xdd, 0x35, 0x76, 0xa, 0x73, 0xce, 0x55, 0x34, 0xe5, 0x92, 0xda, 0xed, 0xde, 0x33, 0x53, 0x6d, 0xdb, 0x55, 0xa, 0x9e, 0xc, 0xe, 0x61, 0x1f, 0xf9, 0xfc, 0xe, 0x70, 0x9d, 0x6a, 0x7c, 0x14, 0xa3, 0x39, 0x80, 0x9a, 0xcb, 0x36, 0xd, 0x7e, 0x18, 0x9b, 0x68, 0xc7, 0x73, 0x19 };
	
#pragma optimize("", off)

int __declspec(naked) VAssembleWrapper()
{
	__asm
	{
		call VAssemble
		add esp, 8
		push eax
		lea eax, [esp+12h]
		push eax
		call CClientSocket::OnCSPacket
		jmp g_VAssembleWrapperExit
	}
}

void CClientSocket::Init()
{
	VIRTUALIZER_START;

	DWORD cryptPacketHook = (DWORD)g_Engine + 0x493C70;
	g_CryptPacketFunction = (*(PDWORD)cryptPacketHook);
	Memory::WriteDWORD(cryptPacketHook, (DWORD)CClientSocket::Crypt);

	VAssemble = (__VAssemble)((UINT)g_Engine + 0x3881A0);
	Memory::WriteJump(((UINT)g_Engine + 0x38BABC), VAssembleWrapper, 0);
	g_VAssembleWrapperExit = (UINT)g_Engine + 0x38BAC1;

	VIRTUALIZER_END;
}

void CClientSocket::OnKeyPacket(LPBYTE lpPacket)
{
	VIRTUALIZER_START;


	LPBYTE lpKey = &lpPacket[1];
	
	VIRTUALIZER_END;
}

//ofstream pck("packet.txt");

void __thiscall CClientSocket::Crypt(CClientSocket *pSocket, LPBYTE lpBuff, LPBYTE lpKey, INT32 size)
{
	VIRTUALIZER_START;

	typedef void (__thiscall *f)(CClientSocket*, LPBYTE, LPBYTE, INT32);
	static f CryptPacket = (f)g_CryptPacketFunction;
	static LONG previousPacketNumber = -1;
	
	LONG packetNumber = InterlockedIncrement(&g_PacketCounter);

	UINT checkSum = (*(PUINT)&lpBuff[size-4]);
	CryptPacket(pSocket, lpBuff, lpKey, size);
	
	if(previousPacketNumber != packetNumber && checkSum == g_LastChecksum)
	{
		for(int n=0;n<size;n++)
		{
			lpBuff[n] ^= g_StaticKey[(n+size)%8][n%32];
		}
		g_LastChecksum = 0;
	}

	previousPacketNumber = packetNumber;
	VIRTUALIZER_END;
}

int CClientSocket::OnCSPacket(LPBYTE buff, int len)
{
	VIRTUALIZER_START;

	//adding checksum
	if(len > 0 && buff[0] != 0xE)
	{
		if(buff[0] == 0x2B)
		{
			g_ChecksumKey = 0;	
			g_PacketCounter = 0;
		}
		UINT checkSum = 0;
		g_ChecksumKey++;
		if((g_ChecksumKey % 2) == 0)
		{
			checkSum = 0x13243546;
		}else
		{
			checkSum = 0x98786756;
		}
		UINT sum = 0;
		for(int n=0;n<len;n++)
		{
			if(n<2)
			{
				sum += n*37;
			}else
			{
				sum += static_cast<UINT>(buff[n]);
			}
		}
		checkSum += sum;
		UtB cs;
		cs.full = checkSum;
		for(int n=0;n<4;n++)
		{
			cs.part[n] += 75;
			cs.part[n] *= len+n+g_ChecksumKey;
		}

		checkSum = cs.full;
		checkSum += g_ChecksumKey;
		checkSum += len;
		g_ChecksumKey += len;

		LPUINT lpCheckSum = (LPUINT)&buff[len];
		(*lpCheckSum) = checkSum;
		g_LastChecksum = checkSum;
		len+=4;
		
//		pck << "Packet: " << hex << (UINT)buff[0] << " len: " << dec << (len-4) << " checksum: " << (UINT)checkSum << " counter: " << g_PacketCounter << " cm_counter: " << g_ChecksumKey << " sum:" << sum << endl;
	}

	VIRTUALIZER_END;
	return len;
}

#pragma optimize("", on)

void CClientSocket::Send(int len, char *buff)
{
	try
	{
		DWORD funcAddr = (*(LPDWORD)this);
		funcAddr += 0x6C;
		funcAddr = (*(LPDWORD)funcAddr);

		typedef void (__cdecl *f)(CClientSocket*, const char*, int, char*);
		f((PVOID)funcAddr)(this, "b", len, buff);
	}catch(...)
	{
	}
}